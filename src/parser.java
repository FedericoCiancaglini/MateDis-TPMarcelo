
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.Stack;
import java.util.HashMap;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\006\006\000\002\004\007\000\002\005\005\000" +
    "\002\007\005\000\002\011\003\000\002\011\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\010\005\004\014\012\015\011\001\002\000" +
    "\004\017\051\001\002\000\014\002\ufffc\005\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\001\002\000\014\002\001\005\001\014" +
    "\001\015\001\020\001\001\002\000\014\002\ufffe\005\ufffe" +
    "\014\ufffe\015\ufffe\020\ufffe\001\002\000\012\002\050\005" +
    "\004\014\012\015\011\001\002\000\020\004\020\005\022" +
    "\010\015\011\025\012\016\013\023\021\021\001\002\000" +
    "\004\021\014\001\002\000\014\002\ufffd\005\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\001\002\000\020\004\020\005\022\010" +
    "\015\011\025\012\016\013\023\021\021\001\002\000\024" +
    "\002\ufff1\005\ufff1\006\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\001\002\000\024\002\uffee\005\uffee" +
    "\006\uffee\014\uffee\015\uffee\016\uffee\020\uffee\021\uffee\022" +
    "\uffee\001\002\000\024\002\ufff3\005\ufff3\006\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\001\002\000" +
    "\024\002\ufff0\005\ufff0\006\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\001\002\000\020\004\020\005" +
    "\022\010\015\011\025\012\016\013\023\021\021\001\002" +
    "\000\024\002\ufff2\005\ufff2\006\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000\004\021\031" +
    "\001\002\000\006\006\026\022\027\001\002\000\024\002" +
    "\uffef\005\uffef\006\uffef\014\uffef\015\uffef\016\uffef\020\uffef" +
    "\021\uffef\022\uffef\001\002\000\020\004\020\005\022\010" +
    "\015\011\025\012\016\013\023\021\021\001\002\000\014" +
    "\002\ufffb\005\ufffb\014\ufffb\015\ufffb\020\ufffb\001\002\000" +
    "\024\002\ufff8\005\ufff8\006\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\001\002\000\004\007\032\001" +
    "\002\000\004\022\033\001\002\000\024\002\uffed\005\uffed" +
    "\006\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022" +
    "\uffed\001\002\000\010\006\ufff3\021\ufff3\022\037\001\002" +
    "\000\006\006\026\021\036\001\002\000\024\002\ufff5\005" +
    "\ufff5\006\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\001\002\000\024\002\ufff4\005\ufff4\006\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\001\002" +
    "\000\006\006\042\016\043\001\002\000\006\006\026\016" +
    "\ufff7\001\002\000\020\004\020\005\022\010\015\011\025" +
    "\012\016\013\023\021\021\001\002\000\010\005\004\014" +
    "\012\015\011\001\002\000\012\005\004\014\012\015\011" +
    "\020\046\001\002\000\014\002\uffff\005\uffff\014\uffff\015" +
    "\uffff\020\uffff\001\002\000\014\002\ufffa\005\ufffa\014\ufffa" +
    "\015\ufffa\020\ufffa\001\002\000\006\006\ufff6\016\ufff6\001" +
    "\002\000\004\002\000\001\002\000\020\004\020\005\022" +
    "\010\015\011\025\012\016\013\023\021\021\001\002\000" +
    "\016\002\ufff9\005\ufff9\006\026\014\ufff9\015\ufff9\020\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\014\002\007\003\005\004\006\005\012\006" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\044\004\006\005" +
    "\012\006\004\001\001\000\010\007\016\010\040\011\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\016\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\033\010" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\016\010\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\016\010\040\011" +
    "\046\001\001\000\014\002\043\003\005\004\006\005\012" +
    "\006\004\001\001\000\012\003\044\004\006\005\012\006" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\016\010\051\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
             
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return getScanner().next_token(); 
    }


    HashMap<String, Object> variables = new HashMap<String, Object>();
    Stack<Boolean> stack = new Stack<Boolean>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= assignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= write 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // write ::= WRITE_CALL OPAR value CPAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(stack.isEmpty() || stack.peek()){System.out.println(v);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // control ::= IF condition THEN expr_list END 
            {
              Object RESULT =null;
		if(!stack.isEmpty())stack.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignation ::= ID EQUALS value 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(stack.isEmpty() || stack.peek()) variables.put(id, value);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operation ::= value OPERATOR value 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Utils.operate(v1, o, v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // condition ::= value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!(v instanceof Boolean)){throw new SyntaxError("got: " + v.getClass() + ", expected: Boolean");}if(stack.isEmpty() || stack.peek())stack.push((Boolean)v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condition ::= condition OPERATOR condition 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(stack.isEmpty() || stack.peek()) stack.push((Boolean) Utils.operate(c1, o, c2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // value ::= OPAR value OPAR 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value ::= OPAR operation CPAR 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= operation 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Object value = variables.get(id);if (value != null){RESULT = value;}else {throw new SyntaxError("Variable:" + id + " was not declared in this scope");}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value ::= NUMBER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= STRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value ::= FLOAT 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float value = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= BOOLEAN 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= READ_CALL OPAR TYPE CPAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Utils.parseRead(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
